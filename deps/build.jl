using BinaryProvider # requires BinaryProvider 0.3.0 or later

const forcecompile = get(ENV, "JULIA_CUBA_BUILD_SOURCE", "false") == "true"

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libcuba"], :libcuba),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/giordano/CubaBuilder/releases/download/v4.2a"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/Cuba.v4.2.0.aarch64-linux-gnu.tar.gz", "377ba6bc0ef2239345531eb05c47597a95aef10d332ba4cbd4693bb6b0bb5382"),
    Linux(:aarch64, :musl) => ("$bin_prefix/Cuba.v4.2.0.aarch64-linux-musl.tar.gz", "a7166a3eb590a40c8444bb9e7d9fac83dffda80c5137e80a6ce03e0df18c72ed"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/Cuba.v4.2.0.arm-linux-gnueabihf.tar.gz", "f0f615075f0d35e4b66dd5f8eb4a233ecf9d4f417c214d85e1581536a9429a12"),
    Linux(:armv7l, :musl, :eabihf) => ("$bin_prefix/Cuba.v4.2.0.arm-linux-musleabihf.tar.gz", "cbd21280e23cb569398ae6a80572dd99700d8b6dc692d6e9e06dea468a9e40a6"),
    Linux(:i686, :glibc) => ("$bin_prefix/Cuba.v4.2.0.i686-linux-gnu.tar.gz", "7c95348962a0ac8d3fb9085279808ed130722cc8d024d88ef24bbbb68e161b4c"),
    Linux(:i686, :musl) => ("$bin_prefix/Cuba.v4.2.0.i686-linux-musl.tar.gz", "24c5db64c9252ff73ace236dfa6cc4cc5a3c97a2a2a123dc196bbacbee491e0b"),
    Windows(:i686) => ("$bin_prefix/Cuba.v4.2.0.i686-w64-mingw32.tar.gz", "dc80306d9679fa1b72d6252474b89fdeade8d70a14f7e80795eb8d7d6c5f66cb"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/Cuba.v4.2.0.powerpc64le-linux-gnu.tar.gz", "e3d4ac450f933382eee79c76b6b6532d4900522341db7f229f7ba032060b3f85"),
    MacOS(:x86_64) => ("$bin_prefix/Cuba.v4.2.0.x86_64-apple-darwin14.tar.gz", "6c8eb86abbbdf3fd67255378bd17f20c8531e19cc3514b334e6c1df7002ff5fc"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/Cuba.v4.2.0.x86_64-linux-gnu.tar.gz", "fd4b1d3c5af161edacf60b1eccf6af86cdfaedb81dd1a8a952a023ab78c4f39e"),
    Linux(:x86_64, :musl) => ("$bin_prefix/Cuba.v4.2.0.x86_64-linux-musl.tar.gz", "7c62d159d27a827372bd33416d72c89e622653dfdbff7ce68e7e60a71d11a615"),
    FreeBSD(:x86_64) => ("$bin_prefix/Cuba.v4.2.0.x86_64-unknown-freebsd11.1.tar.gz", "9a5110c6c78c5fdcc8ebda589804904051ae934d9eb37ddc9849686ba29614bb"),
    Windows(:x86_64) => ("$bin_prefix/Cuba.v4.2.0.x86_64-w64-mingw32.tar.gz", "97013c5b9cc04aef14c2a40cac6d5239951fb9f9ff8d0b3c04820782a1b9f284"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if forcecompile
    include("build_from_source.jl")
else
    if haskey(download_info, platform_key())
        url, tarball_hash = download_info[platform_key()]
        if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
            # Download and install binaries
            install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
        end
    elseif unsatisfied
        # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
        # Alternatively, you could attempt to install from a separate provider,
        # build from source or something even more ambitious here.
        error("Your platform $(triplet(platform_key_abi())) is not supported by this package!")
    end
    # Write out a deps.jl file that will contain mappings for our products
    write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
end
